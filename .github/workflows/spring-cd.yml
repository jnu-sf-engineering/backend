name: Spring Boot CD
run-name: 배포 자동화

# Event: main 브랜치에 merge가 발생할 경우 동작
on:
  pull_request:
    branches:
      - main
    types:
      - closed

# Repository를 read 할 수 있는 권한 부여
permissions:
  contents: read

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # application-jwt.yml 생성
      - name: application-jwt.yml 생성
        run: |
          cd ./src/main/resources
          touch ./application-jwt.yml
          echo "${{ secrets.APPLICATION_JWT_YML }}" | base64 --decode > ./application-jwt.yml

      # Dockerhub 로그인
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker build
      - name: Build Docker Image
        run: docker buildx build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/springboot_app:latest .

      # Docker push
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/springboot_app:latest

  deploy:
    name: Deploy on AWS EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v3

      # AWS EC2 연결 및 배포
      - name: Connect to AWS EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}

          # AWS EC2 쉘 스크립트 수행
          script: |
            cd yeonsu
            sudo docker stop spring
            sudo docker rm spring
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/springboot_app:latest
            sudo docker run --platform linux/amd64 -d -p 8081:8080 --name spring --env-file .env ${{ secrets.DOCKER_USERNAME }}/springboot_app:latest
            sudo docker image prune -a -f