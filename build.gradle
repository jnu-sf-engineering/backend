plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

jacoco {
	toolVersion '0.8.11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	// JPA & MySQL
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Spring security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Test
	testImplementation 'junit:junit:4.13.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
	dependsOn test

	executionData(fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec"))
	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					// 커버리지에서 제외할 클래스
					exclude: ["com/momentum/MomentumApplication.class",
							  "com/momentum/infrastructure/**",
							  "com/momentum/exception/**"])
		}))
		finalizedBy 'jacocoTestCoverageVerification'
	}
}

// 테스트 커버리지
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element 'CLASS'
			limit {
				counter = 'INSTRUCTION'  // 바이트 코드 명령 수
				value = 'COVEREDRATIO'
				minimum = 0.0
			}
		}
	}
}

bootJar {
	enabled = true  // 실행 가능한 jar 파일 생성
}
jar {
	enabled = false  // 일반 jar 파일 생성 비활성 -> Dockerfile 작성 편의를 위해
}
